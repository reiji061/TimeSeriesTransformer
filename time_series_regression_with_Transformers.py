# -*- coding: utf-8 -*-
"""Time_Series_regression_with_Fintuned-Transformers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sKQUxOxDXtfNAaOq8ykFu4ynO6P2Gohr

<a href="https://colab.research.google.com/github/timeseriesAI/tsai/blob/master/tutorial_nbs/04_Intro_to_Time_Series_Regression.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

created by Kaito Narimoto

## Purpose ðŸ˜‡

The purpose of this notebook is to show you how you can create a simple, end-to-end, state-of-the-art **time series regression** model using **`fastai`** and **`tsai`**.

A time series regression is a task in which you assign a continuous value to a univariate or multivariate time series.

## Import libraries ðŸ“š
"""

# Mount GoogleDrive
from google.colab import drive
drive.mount('/content/drive')
ad = '/content/drive/My Drive/Transformer_for_Forecasting/'

!pip install tsai

from tsai.all import *
my_setup()

X, y, splits = get_regression_data('AppliancesEnergy', split_data=False)

print(X.shape)
print(y.shape)

"""# TST baseline ðŸ§¢"""

n_epochs= 150
bs = 128

tfms  = [None, [TSRegression()]]
_result = []
batch_tfms = [TSStandardize()]

learn = TSRegressor(X, y, splits=splits, batch_tfms=batch_tfms, arch=None, metrics=[mae, rmse], bs=128, cbs=ShowGraph())
start = time.time()
learn.fit_one_cycle(n_epochs, 1e-2)
_result.append(learn.recorder.values[-1][-1])
#learn.show_probas()
print('\nElapsed time:', time.time() - start)
print(f'\nrmse: {np.mean(_result):.3f} +/- {np.std(_result):.3f} in tests')